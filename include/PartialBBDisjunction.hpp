/**
 * @file PartialBBDisjunction.hpp
 * @author A. M. Kazachkov
 * @date 2018-02-22
 */
#pragma once

#include <limits> // numeric_limits

#include "VPCDisjunction.hpp"

class OsiSolverInterface;
class PartialBBDisjunction;

/// @brief Extract options for branching decisions
void getCbcStrategies(const VPCParametersNamespace::VPCParameters& params,
    int& compare_strategy, int& branch_strategy, int& choose_strategy);

#ifdef USE_CBC
class CbcModel;
class CbcEventHandler;

/// @brief Set parameters for Cbc used for VPCs, as well as the custom branching decision
void setCbcParametersForPartialBB(CbcModel* const cbc_model,
    const int verbosity, const int compare_strategy,
    const int branch_strategy, const int choose_strategy,
    const int numStrong = 5, const int numBeforeTrusted = 10,
    const double max_time = std::numeric_limits<double>::max(),
    CbcEventHandler* eventHandler = NULL);

/// @brief Generate a partial branch-and-bound tree with at most \p max_leaf_nodes leaf nodes
void generatePartialBBTree(PartialBBDisjunction* const owner,
    CbcModel* cbc_model, const OsiSolverInterface* const solver,
    const int max_leaf_nodes, const int num_strong, const int num_before_trusted);
#endif // USE_CBC

/// @brief Keeps split information at root, and best bound on each side
struct RootTerm {
  int var;       ///< var branched on
  double val;    ///< value of var when it is branched on
  double boundD; ///< best bound in down branch
  double boundU; ///< best bound in up branch

  /// @brief Constructor (calls initialize())
  RootTerm() {
    initialize();
  } /* constructor */

  /// @brief Reset root term information and deletes any allocated memory
  void clear() {
    var = -1;
    val = 0.;
    boundD = std::numeric_limits<double>::max();
    boundU = std::numeric_limits<double>::max();
  } /* clear */

  /// @brief Initialize root term (calls clear())
  void initialize() {
    clear();
  } /* initialize */
}; /* RootTerm */

//<!----------------------------------------------------------------------->
///  @brief Disjunction generated from a partial branch-and-bound tree
///  @details Currently requires the use of Cbc
class PartialBBDisjunction : public VPCDisjunction {
public:
  RootTerm root;  ///< keeps split information at root and best bound on each side
  int num_rounds; ///< which round of cuts is being generated (can potentially inform parameter choices)

  /// Collection of useful statistics about the branch-and-bound tree generated by PartialBBDisjunction
  struct PartialBBDisjunctionData {
    int num_nodes_on_tree = 0; ///< number of nodes left on tree
    int num_partial_bb_nodes = 0; ///< number of nodes explored
    int num_pruned_nodes = 0; ///< number of nodes that were pruned (by bound, infeasibility, or integrality)
    int min_node_depth = std::numeric_limits<int>::max(); ///< depth of shallowest node in the tree
    int max_node_depth = 0; ///< depth of deepest node in the tree
    int num_fixed_vars = 0; ///< number of variables fixed at the root

    /// @brief Constructor (calls initialize())
    PartialBBDisjunctionData() { initialize(); }

    /// @brief Initialize values of all members
    void initialize() {
      num_nodes_on_tree = 0;
      num_partial_bb_nodes = 0;
      num_pruned_nodes = 0;
      min_node_depth = std::numeric_limits<int>::max();
      max_node_depth = 0;
      num_fixed_vars = 0;
    } /* initialize */
  } data; ///< Current tree data

  /// @brief Param constructor
  PartialBBDisjunction(const VPCParametersNamespace::VPCParameters& params);

  /// @brief Copy and param constructor
  PartialBBDisjunction(const PartialBBDisjunction& source, const VPCParametersNamespace::VPCParameters& params);

  /// @brief Default constructor
  PartialBBDisjunction();

  /// @brief Copy constructor
  PartialBBDisjunction(const PartialBBDisjunction& source);

  /// @brief Destructor
  ~PartialBBDisjunction();

  /// @brief Assignment operator
  PartialBBDisjunction& operator=(const PartialBBDisjunction& source);

  /// @brief Clone
  virtual PartialBBDisjunction* clone() const;

  /// @brief For clearing things and setting up the disjunction as new
  virtual void setupAsNew();

  /// @brief Prepare a new disjunction
  virtual DisjExitReason prepareDisjunction(const OsiSolverInterface* const si);

protected:
  /// @brief Initialize values of class members
  void initialize(
      const PartialBBDisjunction* const source = NULL,
      const VPCParametersNamespace::VPCParameters* const params = NULL);
}; /* PartialBBDisjunction */
